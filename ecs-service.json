{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "ECS Service with ALB, one service-autoscaled container from ECR repository",

  "Parameters" : {

    "EcsClusterStackName": {
      "Description": "Existing ECS Cluster stack name",
      "Type": "String"
    },

    "VpcStackName": {
      "Description": "Existing ECS Cluster stack name",
      "Type": "String"
    },

    "AppName" : {
      "Description": "Application name",
      "Type": "String"
    },

    "AppPort": {
      "Description": "Application's TCP port number",
      "Type": "String"
    },

    "AppImageTag" : {
      "Description": "Application tag",
      "Type": "String",
      "Default": "latest"
    },

    "ArtefactS3bucket": { 
      "Description": "S3 bucket for artefacts", 
      "Type": "String"
    }

  },

  "Resources": {

    "ECSservice": {
      "Type": "AWS::ECS::Service",
      "DependsOn": "ALBListener",
      "Properties": {
        "Cluster": { "Fn::ImportValue" : {"Fn::Sub": "${EcsClusterStackName}-ecscluster" } },
        "DesiredCount": "1",
        "LoadBalancers": [
          {
            "ContainerName": { "Ref": "AppName" },
            "ContainerPort": { "Ref": "AppPort" },
            "TargetGroupArn": { "Ref": "ALBTargetGroup" }
          }
        ],
        "Role": { "Ref": "ECSServiceRole" },
        "TaskDefinition": { "Ref": "ECStaskdefinition" }
      }
    },

    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Ref": "AWS::StackName" },
        "RetentionInDays":60
      }
    },

    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ecs.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "ECStaskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Ref": "AWS::StackName" },
        "ContainerDefinitions": [{
            "Name": { "Ref": "AppName" },
            "Image": { "Fn::Join": [ "", [
              { "Ref": "AWS::AccountId" }, ".dkr.ecr.", { "Ref": "AWS::Region" }, ".amazonaws.com/",
              { "Ref": "AppName" }, ":", { "Ref": "AppImageTag" }
            ]]},
            "Cpu": "600",
            "Memory": "1200",
            "PortMappings": [{  "ContainerPort": { "Ref": "AppPort" } }],
            "Essential": "true",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": { "Ref": "CloudwatchLogsGroup" },
                "awslogs-region": { "Ref": "AWS::Region" },
                "awslogs-stream-prefix":  { "Ref": "AppName" }
              }
            }
        }]
      }
    },

    "ECSALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets" : [ 
          { "Fn::ImportValue" : {"Fn::Sub": "${VpcStackName}-public-a" } }, 
          { "Fn::ImportValue" : {"Fn::Sub": "${VpcStackName}-public-b" } }
        ],
        "SecurityGroups": [ { "Ref": "ALBSecurityGroup" } ]
      }
    },

    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn": "ECSServiceRole",
      "Properties": {
        "DefaultActions": [{
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ALBTargetGroup" }
          }],
        "LoadBalancerArn": { "Ref": "ECSALB" },
        "Port": { "Ref": "AppPort" },
        "Protocol": "HTTP"
      }
    },

    "ECSALBListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "DependsOn": "ALBListener",
      "Properties": {
        "Actions": [ { "Type": "forward", "TargetGroupArn": { "Ref": "ALBTargetGroup" } } ],
        "Conditions": [ { "Field": "path-pattern", "Values": [ "/" ] } ],
        "ListenerArn": { "Ref": "ALBListener" },
        "Priority":1
      }
    },

    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn": "ECSALB",
      "Properties": {
        "HealthCheckIntervalSeconds":10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds":5,
        "HealthyThresholdCount":2,
        "Name": { "Ref": "AWS::StackName" },
        "Port": { "Ref": "AppPort" },
        "Protocol": "HTTP",
        "UnhealthyThresholdCount":2,
        "VpcId": { "Fn::ImportValue" : {"Fn::Sub": "${VpcStackName}-VpcId" } }
      }
    },

    "ALBSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Fn::ImportValue" : {"Fn::Sub": "${VpcStackName}-VpcId" } },
        "GroupDescription" : "Allows connectivity to ALB",
        "SecurityGroupIngress" : [ {
          "FromPort" : { "Ref": "AppPort" },
          "ToPort" : { "Ref": "AppPort" },
          "IpProtocol" : "tcp",
          "CidrIp" : "0.0.0.0/0"
        }]
      }
    },

    "EcsClusterSecurityGroupIngress": {
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "GroupId": { "Fn::ImportValue" : {"Fn::Sub": "${EcsClusterStackName}-ecsclustersecgroup" } },
        "IpProtocol":"tcp",
        "FromPort":"31000",
        "ToPort":"61000",
        "SourceSecurityGroupId":{ "Ref":"ALBSecurityGroup" }
      }
    },

    "ServiceScalingTarget": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "DependsOn": "ECSservice",
      "Properties": {
        "MaxCapacity":10,
        "MinCapacity":1,
        "ResourceId": { "Fn::Join": [ "", [
          "service/",
          { "Fn::ImportValue" : {"Fn::Sub": "${EcsClusterStackName}-ecscluster" } }, "/",
          { "Fn::GetAtt": [ "ECSservice", "Name" ] }
        ]]},
        "RoleARN": { "Fn::GetAtt": [ "AutoscalingRole", "Arn" ] },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      }
    },

    "ServiceScalingUpPolicy": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "AppScalingUpPolicy",
        "PolicyType": "StepScaling",
        "ScalingTargetId": { "Ref": "ServiceScalingTarget" },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "ChangeInCapacity",
          "Cooldown":60,
          "MetricAggregationType": "Average",
          "StepAdjustments": [{
              "MetricIntervalLowerBound":0,
              "ScalingAdjustment": 1
          }]
        }
      }
    },

    "ServiceScalingDownPolicy": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "AppScalingDownPolicy",
        "PolicyType": "StepScaling",
        "ScalingTargetId": { "Ref": "ServiceScalingTarget" },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "ChangeInCapacity",
          "Cooldown":60,
          "MetricAggregationType": "Average",
          "StepAdjustments": [{
              "MetricIntervalUpperBound":0,
              "ScalingAdjustment": -1
          }]
        }
      }
    },

    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Service containers CPU utilization more than 75%",
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "75",
        "Period": "60",
        "AlarmActions": [ { "Ref": "ServiceScalingUpPolicy" } ],
        "Namespace": "AWS/ECS",
        "Dimensions": [
          { "Name": "ServiceName", "Value": { "Fn::GetAtt": [ "ECSservice", "Name" ] } },
          { "Name": "ClusterName", "Value": { "Fn::ImportValue" : {"Fn::Sub": "${EcsClusterStackName}-ecscluster" } } }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },

    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Service containers CPU utilization less than 30%",
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "30",
        "Period": "60",
        "AlarmActions": [ { "Ref": "ServiceScalingDownPolicy" } ],
        "Namespace": "AWS/ECS",
        "Dimensions": [
          { "Name": "ServiceName", "Value": { "Fn::GetAtt": [ "ECSservice", "Name" ] } },
          { "Name": "ClusterName", "Value": { "Fn::ImportValue" : {"Fn::Sub": "${EcsClusterStackName}-ecscluster" } } }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },

    "AutoscalingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "application-autoscaling.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "service-autoscaling",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }

  },

  "Outputs": {

    "ecsservice": { 
      "Value": { "Ref": "ECSservice" }
    },

    "ECSALB": {
      "Description": "Your ELB DNS URL",
      "Value": { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "ECSALB", "DNSName" ] } ]]}
    },

    "taskdef": {
      "Value": { "Ref": "ECStaskdefinition" }
    }
  }
}

